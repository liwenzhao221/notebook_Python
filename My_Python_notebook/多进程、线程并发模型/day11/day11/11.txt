前情回顾

1. 线程 续
   线程属性
   自定义线程类

2. 线程的同步互斥

   Event   e.set()  e.wait()  e.clear()
   Lock    lock.acquire()  lock.release()

   * 死锁 : 造成程序的阻塞,无法执行

3. GIL 问题 : 解释器解释线程时同一时刻只能解释一个

   Python 线程 : 只适合高延迟,多阻塞的IO行为

4. 进程和线程对比

5. 网络并发

   多进程和多线程并发

ftp 文件服务器

功能
【1】 分为服务端和客户端，要求可以有多个客户端同时操作。
【2】 客户端可以查看服务器文件库中有什么文件。
【3】 客户端可以从文件库中下载文件到本地。
【4】 客户端可以上传一个本地文件到文件库。
【5】 使用print在客户端打印命令输入提示，引导操作

1. 技术点确定
   * 并发 : 多线程并发
   * 数据传输 : tcp传输

2. 结构设计

   将基本功能封装为类

3. 功能模块

   * 搭建网络通信
   * 查看文件列表
   * 下载文件
   * 上传文件
   * 客户端退出

4. 协议 (协议类型 参数)

   查看文件列表 :    'L'
   退出 : 'Q'
   下载 :  'G filename'
   上传 :  "P filename"

作业　：　１．　熟练ｓｅｌｅｃｔ使用
        ２． 思考　如果客户端退出　服务端怎么处理
        3. 文件服务器思路梳理
        4. 复习　ＨＴＴＰ　协议











