正则表达式
s = '老齐: qtx@tedu.cn'

import re

re.findall()
re.findall('\w+@\w+\.cn',s)

re.findall('a','asdfasdf')
re.findall('ab','adsfadf')# ab表示必须紧挨着
re.findall('你好','你好asdfasdfasd')

元字符：|
	匹配两侧任意的正则表达式即可
	re.findall('http|https','http://www.baidu.com')

元字符：.
	匹配除换行外的任意一个字符
	re.findall('张.丰','张三丰，张思丰，张武峰')

元字符：[字符集]
	匹配字符集中的任意一个字符
	[abc#!好]
	re.findall('[aeiou]','hello world')
	[0-9],[a-z][A-Z]表示区间内的任意一个字符
	[_#0-9a-z]字符和数字字母匹配到一起

元字符：[^字符集]
	匹配除了字符集意外的任意一个字符
	re.findall('[^_#0-9a-z]','Port-18')

元字符：^
	匹配目标字符串的开头位置
	re.findall('^Jame','Jame,hello')
	表示必须以匹配字符开头才可以

元字符：$
	匹配目标字符串的结尾位置
	re.findall('Jame$','Jame,hello,Jame')

	[^$]同时出现，表示完全匹配目标字符串/绝对匹配

元字符：*
	匹配前面的字符出现0次或多次
	re.findall('wo*','wooooooo~~w!')
	匹配'o'出现多次的字符集和出现0次的字符集
	wo加上小括号（）代表wo是一个整体，匹配需要匹配整体
	[]中括号代表字符集，与不加效果一样

re.findall('[a-zA-Z]*','How are you')

re.findall('^[A-Z][a-z]*','How are you') # *匹配到空格就会停止匹配

元字符：+
	匹配前面的字符出现1次或多次
	re.findall('[A-Z][a-z]+','How are you ? Fine Jame')

元字符：？
	匹配前面的字符出现0次或1次
	re.findall('ab?','abbbababaaabbbbabababababa')
	re.findall('-?[0-9]+','168 -28 29 -8')

元字符：{m,n}
	匹配前面的字符出现m-n次
	re.findall('a{2,4}','abababkjabkjkabjakbakjbkababab')
	re.findall('[1-9][0-9]{5,10}','qq:127638947')

匹配任意（非）数字字符
元字符 \d \D
	\d匹配任意数字字符，\D匹配任意非数字字符
	 re.findall('\d{1,5}','Mysql: 3306,http:8080')
	 re.findall('\D+','Mysql: 3306,http:8080')

匹配任意（非）普通字符
元字符 \w \W
	\w匹配普通字符，\W匹配非普通字符
	说明：普通字符指数字，字母，下划线，汉子
	re.findall('\w+','server_port = 8888')
	re.findall('\W+','server_port = qqqq')

匹配任意（非）空字符
元字符： \s \S
	\s匹配空字符，\S匹配非空字符
	说明：空字符指空格 \r \n \t \v \f字符
	re.finall('\w+\s+\w+','hello         world')
	re.finall('\S+','hello         world')

匹配开头结尾位置
元字符 \A \Z
	\A表示开头位置，\Z表示结尾位置

匹配（非）单词的边界位置
元字符 \b \B
	\b表示单词边界，\B表示非单词边界
	说明：单词边界指数字字母（汉字）下划线与其他字符的交界位置
	re.findall(r'\bis\b','This is a test.')

	re.findall('-?\d+.?\d*','12 -36 28 1.34 -3.8')

在编程语言中，常使用原生字符串书写正则表达式避免多重转义的麻烦

贪婪模式和非贪婪模式
贪婪模式：默认情况下，匹配重复的元字符总是尽可能多的向后匹配内容。*+?{m,n}
非贪婪模式（懒惰模式）：让匹配重复的元字符尽可能少的向后匹配内容。


re.findall(r'','ababababababab')

re.search(r'(ab)+','abababababab').group() # 括号就是分组
(https|http|ftp|file)://\S+  https://www.baidu.com

捕获组-可以给正则表达式的自组起一个名字，表达该自组的意义
这种有名称的自组即为捕获组

re.search(r'(?P<pib>ab)','ababababababa').group()
一个正则表达式中可以包含多个自组
自组可以嵌套，但是不要重叠或者嵌套结构复杂
子组序列号一般从外到内，从左到右计数

正则表达式匹配原则
正确性，能够正确的匹配目标字符串
排他性，除了目标字符串之外尽可能少的匹配其他内容
全面性，尽可能考虑到目标字符串的所有情况，不遗漏